// // AUTO-GENERATED FILE. DO NOT MODIFY.
// // This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/test;
import ballerina/oauth2;
import ballerina/io;
import ballerina/http;

configurable string clientId = ?;
configurable string clientSecret = ?;
configurable string refreshToken = ?;

OAuth2RefreshTokenGrantConfig auth = {
       clientId: clientId,
       clientSecret: clientSecret,
       refreshToken: refreshToken,
       credentialBearer: oauth2:POST_BODY_BEARER
};


ConnectionConfig config = {auth:auth};
final Client baseClient = check new Client(config, serviceUrl = "https://api.hubapi.com/crm/v3/objects");

@test:Config {}
isolated function testGetAllCompanies() returns error? {
  CollectionResponseSimplePublicObjectWithAssociationsForwardPaging  companies = check baseClient->/companies;
  test:assertTrue(companies.results.length() > 0);
};

@test:Config {}
isolated function testBatchRead() returns error? {
    // Define the payload for the request
    BatchReadInputSimplePublicObjectId payload = {
        propertiesWithHistory: [],
        inputs: [
            {id: "28104552201"},  // ID of the first company (HubSpot)
            {id: "28152220570"}   // ID of the second company (TestCompany)
        ],
        properties: []
    };
    
    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = check baseClient->/companies/batch/read.post(payload);
    
    // Validate the response
    if response is BatchResponseSimplePublicObject {
        // Assert that the response contains non-zero number of companies
        test:assertTrue(response.results.length() > 0, "Expected non-zero amount of companies");
    } else {
        test:assertFail("Failed to read batch of companies");
    }
}

@test:Config {}
isolated function testCreateCompanies() returns error? {
    // Define the payload for creating a company
    SimplePublicObjectInputForCreate payload = {
        properties: {
    "name": "Maga",
    "domain": "maga.com",
    "city": "Colombo",
    "industry": "MARKETING_AND_ADVERTISING",
    "phone": "111-111-111",
    "state": "Western",
    "lifecyclestage": "lead"
  },
        associations: []
    };

    SimplePublicObject|error response = check baseClient->/companies.post(payload);

    // Validate the response
    if response is SimplePublicObject {
        // Assert that the response contains an ID and the name matches
        test:assertTrue(response.id != "", "Expected a valid company ID to be returned");
        test:assertEquals(response.properties["name"], "Maga", "Expected company name to match");
    } else {
        test:assertFail("Failed to create a company");
    }
}

@test:Config {}
isolated function testGetCompanies() returns error? {
    // Define the query parameters
    GetCrmV3ObjectsCompanies_getpageQueries queries = {
        associations: [],
        archived: false,
        propertiesWithHistory: [],
        'limit: 10,
        after: (),
        properties: ["name", "domain", "hs_object_id"]
    };

    // Send the GET request with query parameters
    CollectionResponseSimplePublicObjectWithAssociationsForwardPaging|error response = check baseClient->/companies.get(queries = queries);

    // Validate the response
    if response is CollectionResponseSimplePublicObjectWithAssociationsForwardPaging {
        // Assert that the response contains at least one company
        test:assertTrue(response.results.length() > 0, "Expected at least one company to be returned");
    } else {
        test:assertFail("Failed to retrieve companies page");
    }
}


@test:Config {}
isolated function testSearchCompany() returns error? {
    // Define the payload for the search request
    PublicObjectSearchRequest payload = {
        query: "TestCompany", // Search query
        'limit: 10,         // Limit the results to 10
        after: (),
        sorts: [],
        properties: ["name", "domain", "hs_object_id"], // Properties to include in the response
        filterGroups: []
    };

    // Send the POST request with the payload
    CollectionResponseWithTotalSimplePublicObjectForwardPaging|error response = check baseClient->/companies/search.post(payload);

    // Validate the response
    if response is CollectionResponseWithTotalSimplePublicObjectForwardPaging {
        // Assert that the response contains at least one company
        // io:println("Search Response: ", response);
        test:assertTrue(response.results.length() > 0, "Expected at least one company to match the search criteria");
    } else {
        test:assertFail("Failed to search for companies");
    }
}


@test:Config {}
isolated function testUpdateCompany() returns error? {
    // Define the company ID to update
    string companyId = "28152220570"; // Replace with the actual company ID

    // Define the payload for updating the company
    SimplePublicObjectInput payload = {
        properties: {
            "name": "Updated TestCompany",  // New company name
            "domain": "updateddomain.com"  // New company domain
        }
    };

    // Send the PATCH request with the payload
    SimplePublicObject|error response = check baseClient->/companies/[companyId].patch(payload);

    // Validate the response
    if response is SimplePublicObject {
        // Print the updated company details
        // io:println("Updated Company: ", response);

        // Assert that the updated name matches the input
        test:assertEquals(response.properties["name"], "Updated TestCompany", "The company name was not updated correctly.");

        // Assert that the updated domain matches the input
        test:assertEquals(response.properties["domain"], "updateddomain.com", "The company domain was not updated correctly.");
    } else {
        test:assertFail("Failed to update the company");
    }
}


@test:Config {}
isolated function testGetCompanyById() returns error? {
    // Define the company ID to retrieve
    string companyId = "28152220570"; // Replace with the actual company ID

    // Define query parameters (optional)
    GetCrmV3ObjectsCompaniesCompanyid_getbyidQueries queries = {};

    // Send the GET request
    SimplePublicObjectWithAssociations|error response = check baseClient->/companies/[companyId](queries = queries);

    // Validate the response
    if response is SimplePublicObjectWithAssociations {
        // Print the response
        // io:println("Retrieved Company: ", response);

        // Assert the response is not empty
        test:assertTrue(response.id != "", "No company data was retrieved.");
    } else {
        test:assertFail("Failed to retrieve the company.");
    }
}

@test:Config {}
isolated function testDeleteCompany() returns error? {
    // Define the company ID to delete
    string companyId = "28186823517"; // Replace with the actual company ID to be archived

    // Send the DELETE request
    http:Response|error response = check baseClient->/companies/[companyId].delete();
    // Validate the response
    if response is http:Response {
        // Print the response status and headers
        // io:println("Delete Response: ", response);

        // Assert successful deletion (HTTP status code 204 indicates success)
        test:assertEquals(response.statusCode, 204, "Company was not archived successfully.");
    } else {
        test:assertFail("Failed to archive the company.");
    }
}



// @test:Config {}
// isolated function  testPost-/crm/v3/objects/companies/batch/upsert_upsert() {
// }

@test:Config {}
isolated function testBatchCreate() returns error? {
    // Define the batch payload for creating companies
    BatchInputSimplePublicObjectInputForCreate payload = {
        inputs: [
            {
                properties: {
                    "name": "CompanyOne",
                    "domain": "companyone.com"
                }
            },
            {
                properties: {
                    "name": "CompanyTwo",
                    "domain": "companytwo.com"
                }
            }
        ]
    };

    // Send the POST request
    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = check baseClient->/companies/batch/create.post(payload);

    // Print and validate the response
    if response is error {
        // io:println("Error occurred while creating batch companies: ", response.message());
        test:assertFail("Batch creation failed.");
    } else {
        // io:println("Batch creation response: ", response);
        test:assertTrue(response is BatchResponseSimplePublicObject, 
            "Batch creation should return a successful response.");
    }
}


@test:Config {}
isolated function testBatchUpdate() returns error? {
    // Define the batch payload for updating companies
    BatchInputSimplePublicObjectBatchInput payload = {
        inputs: [
            {
                id: "28104552201", // Replace with a valid company ID
                properties: {
                    "name": "UpdatedCompanyOne",
                    "domain": "updatedcompanyone.com"
                }
            },
            {
                id: "28152220570", // Replace with a valid company ID
                properties: {
                    "name": "UpdatedCompanyTwo",
                    "domain": "updatedcompanytwo.com"
                }
            }
        ]
    };

    // Send the POST request
    BatchResponseSimplePublicObject|BatchResponseSimplePublicObjectWithErrors|error response = check baseClient->/companies/batch/update.post(payload);

    // Print and validate the response
    if response is error {
        // io:println("Error occurred while updating batch companies: ", response.message());
        test:assertFail("Batch update failed.");
    } else {
        // io:println("Batch update response: ", response);
        test:assertTrue(response is BatchResponseSimplePublicObject, 
            "Batch update should return a successful response.");
    }
}


@test:Config {}
isolated function testBatchArchive() returns error? {
    // Define the batch payload for archiving companies
    BatchInputSimplePublicObjectId payload = {
        inputs: [
            { id: "28175399198" }, // Replace with a valid company ID
            { id: "28197129488" }  // Replace with another valid company ID
        ]
    };

    // Send the POST request
    http:Response|error response = check baseClient->/companies/batch/archive.post(payload);
    // Print and validate the response
    if response is error {
        io:println("Error occurred while archiving batch companies: ", response.message());
        test:assertFail("Batch archive failed.");
    } else {
        io:println("Batch archive response status code: ", response.statusCode);
        test:assertTrue(response.statusCode == 200, 
            "Batch archive should return a successful status code (200).");
    }
}


// @test:Config {}
// isolated function  testPost-/crm/v3/objects/companies/merge_merge() {
// }
